#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

enum enQuestionsLevel { EasyLevel = 1, MedLevel = 2, HardLevel = 3, Mix = 4 };
enum enOpetarionType { Add = 1, Sub = 2, Mult = 3, Div = 4, MixOp = 5 };

string GetOpTypeSymbol(enOpetarionType OpType)
{
	switch (OpType)
	{
	case enOpetarionType::Add:
		return "+";
	case enOpetarionType::Sub:
		return "-";
	case enOpetarionType::Mult:
		return "x";
	case enOpetarionType::Div:
		return "/";
	default:
		return "Mix";
	}
}

string GetQuestionLevelText(enQuestionsLevel QuestionLevel)
{
	string arrQuestionLevelText[4] = { "Easy", "Med", "Hard", "Mix" };
	return arrQuestionLevelText[QuestionLevel - 1];
}

int RandomNumber(int From, int To)
{
	int randNum = rand() % (To - From + 1) + From;
	return randNum;
}

void SetScreenColor(bool Right)
{
	if (Right)
		system("color 2F");
	else
	{
		system("color 4F");
		cout << "\a";
	}
}

short ReadHowManyQuestion()
{
	short NumberOfQuestion;
	do
	{
		cout << "How Many Question do you want to answer ? ";
		cin >> NumberOfQuestion;
	} while (NumberOfQuestion < 1 || NumberOfQuestion > 10);

	return NumberOfQuestion;
}

enQuestionsLevel ReadQuestionsLevel()
{
	short QuestionLevel = 0;
	do
	{
		cout << "Enter Question Level [1] Easy, [2] Med, [3] Hard [4] Mix ? ";
		cin >> QuestionLevel;
	} while (QuestionLevel < 1 || QuestionLevel > 4);

	return (enQuestionsLevel)QuestionLevel;
}

enOpetarionType ReadOpType()
{
	short OpType;
	do
	{
		cout << "Enter Operation Type [1] Add, [2] Sub, [3] Mul, [4] Div, [5] Mix ? ";
		cin >> OpType;
	} while (OpType < 1 || OpType > 5);

	return (enOpetarionType)OpType;
}

struct stQuestion
{
	int Number1 = 0;
	int Number2 = 0;
	enOpetarionType OperationType;
	enQuestionsLevel QuestionsLevel;
	int CorrectAnswer = 0;
	int PlayerAnswer = 0;
	bool AnswerResult = false;
};

struct stQuiz
{
	stQuestion QuestionList[100];
	short NumberOfQuestions;
	enQuestionsLevel QuestionsLevel;
	enOpetarionType OpType;
	short NumberOfWrongAnswers = 0;
	short NumberOfRightAnswer = 0;
	bool isPass = false;
};

int SimpleCalculator(int Number1, int Number2, enOpetarionType OpType)
{
	switch (OpType)
	{
	case enOpetarionType::Add:
		return Number1 + Number2;
	case enOpetarionType::Sub:
		return Number1 - Number2;
	case enOpetarionType::Mult:
		return Number1 * Number2;
	case enOpetarionType::Div:
		return Number1 / Number2;
	default:
		return Number1 + Number2;
	}
}

enOpetarionType GetRandomOperationType()
{
	int Op = RandomNumber(1, 4);
	return (enOpetarionType)Op;
}

stQuestion GenerateQuestion(enQuestionsLevel QuestionLevel, enOpetarionType OpType)
{
	stQuestion Question;

	if (QuestionLevel == enQuestionsLevel::Mix)
	{
		QuestionLevel = (enQuestionsLevel)RandomNumber(1, 3);
	}
	
	if (OpType == enOpetarionType::MixOp)
	{
		OpType = GetRandomOperationType();
	}

	Question.OperationType = OpType;

	switch (QuestionLevel)
	{
	case enQuestionsLevel::EasyLevel:
		Question.Number1 = RandomNumber(1, 10);
		Question.Number2 = RandomNumber(1, 10);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;

		return Question;

	case enQuestionsLevel::MedLevel:
		Question.Number1 = RandomNumber(10, 50);
		Question.Number2 = RandomNumber(10, 50);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;

		return Question;

	case enQuestionsLevel::HardLevel:
		Question.Number1 = RandomNumber(50, 100);
		Question.Number2 = RandomNumber(50, 100);

		Question.CorrectAnswer = SimpleCalculator(Question.Number1, Question.Number2, Question.OperationType);
		Question.QuestionsLevel = QuestionLevel;

		return Question;
	}

	return Question;
}

void GenerateQuizQuestions(stQuiz& Quiz)
{
	for (short Question = 0; Question < Quiz.NumberOfQuestions; Question++)
	{
		Quiz.QuestionList[Question] = GenerateQuestion(Quiz.QuestionsLevel, Quiz.OpType);
	}
}

int ReadQuestionAnswer()
{
	int Answer = 0;
	cin >> Answer;
	return Answer;
}

void PrintTheQuestion(stQuiz& Quiz, short QuestionNumber)
{
	cout << "\n";
	cout << "Question [" << QuestionNumber + 1 << "/" << Quiz.NumberOfQuestions << "] \n\n";
	cout << Quiz.QuestionList[QuestionNumber].Number1 << endl;
	cout << Quiz.QuestionList[QuestionNumber].Number2 << " ";
	cout << GetOpTypeSymbol(Quiz.QuestionList[QuestionNumber].OperationType);
	cout << "\n_________" << endl;
}

void CorrectTheQuestionAnswer(stQuiz& Quiz, short QuestionNumber)
{
	if (Quiz.QuestionList[QuestionNumber].PlayerAnswer != Quiz.QuestionList[QuestionNumber].CorrectAnswer)
	{
		Quiz.QuestionList[QuestionNumber].AnswerResult = false;
		Quiz.NumberOfWrongAnswers++;

		cout << "Wrong Answer :-( \n";
		cout << "The right answer is: ";
		cout << Quiz.QuestionList[QuestionNumber].CorrectAnswer;
		cout << "\n";
	}
	else
	{
		Quiz.QuestionList[QuestionNumber].AnswerResult = true;
		Quiz.NumberOfRightAnswer++;

		cout << "Right Answer :-) \n";
	}
	cout << endl;

	SetScreenColor(Quiz.QuestionList[QuestionNumber].AnswerResult);

}

void AskAndCorrectQuestionListAnswer(stQuiz& Quiz)
{
	for (short QuestionNumber = 0; QuestionNumber < Quiz.NumberOfQuestions; QuestionNumber++)
	{
		PrintTheQuestion(Quiz, QuestionNumber);

		Quiz.QuestionList[QuestionNumber].PlayerAnswer = ReadQuestionAnswer();

		CorrectTheQuestionAnswer(Quiz, QuestionNumber);

	}

	Quiz.isPass = (Quiz.NumberOfRightAnswer >= Quiz.NumberOfWrongAnswers);

}

string GetFinalResultsText(bool Pass)
{
	if (Pass)
		return "PASS :-)";
	else
		return "Fail :-(";
}

void PrintQuizResults(stQuiz Quiz)
{
	cout << "\n";
	cout << "______________________________\n\n";
	cout << " Final Result is " << GetFinalResultsText(Quiz.isPass);
	cout << "\n______________________________\n\n";

	cout << "Number of Questions   : " << Quiz.NumberOfQuestions << endl;
	cout << "Question Level        : " << GetQuestionLevelText(Quiz.QuestionsLevel) << endl;
	cout << "OpType                : " << GetOpTypeSymbol(Quiz.OpType) << endl;
	cout << "Number of Right Answer: " << Quiz.NumberOfRightAnswer << endl;
	cout << "Number of Wrong Answer: " << Quiz.NumberOfWrongAnswers << endl;
	cout << "______________________________\n";
}

void PlayMathGame()
{
	stQuiz Quiz;

	Quiz.NumberOfQuestions = ReadHowManyQuestion();
	Quiz.QuestionsLevel = ReadQuestionsLevel();
	Quiz.OpType = ReadOpType();

	GenerateQuizQuestions(Quiz);
	AskAndCorrectQuestionListAnswer(Quiz);
	PrintQuizResults(Quiz);

}

void ResetScreen()
{
	system("cls");
	system("color 0F");

}

void StartGame()
{
	char PlayAgain = 'Y';

	do
	{
		ResetScreen();
		PlayMathGame();

		cout << endl << "Do you want to play again? Y/N? ";
		cin >> PlayAgain;

	} while (PlayAgain == 'Y' || PlayAgain == 'y');

}

int main()
{
	srand((unsigned)time(NULL));

	StartGame();

	return 0;
}